[
{
'testname': "courseRestOperations",
'annotations':"""     @AccessMode(resID = "loginservice", concurrency = 10, sharing = true, accessMode = "READONLY")
@AccessMode(resID = "openvidumock", concurrency = 10, sharing = true, accessMode = "NOACCESS")
@AccessMode(resID = "configuration", concurrency = 1, accessMode = "READWRITE")
@AccessMode(resID = "executor", concurrency = 1, accessMode = "READWRITE")
@AccessMode(resID = "webbrowser", concurrency = 1, accessMode = "READWRITE")
@AccessMode(resID = "webserver", concurrency = 1, accessMode = "READWRITE") """,
'parameters': [],
'code': """
    slowLogin(user, TEACHER_MAIL, TEACHER_PASS);
    CourseNavigationUtilities.newCourse(user.getDriver(), COURSE_NAME);
    log.info("Editing course");
    String editedCourseName = COURSE_NAME + EDITED;
    List<WebElement> editIcons = user.getDriver().findElements(By.className("course-put-icon"));
    openDialog(editIcons.get(editIcons.size() - 1), user);
    user.waitUntil(ExpectedConditions.elementToBeClickable(By.id("input-put-course-name")), "Input for course name not clickable");
    WebElement courseNameInput = user.getDriver().findElement(By.id("input-put-course-name"));
    courseNameInput.clear();
    courseNameInput.sendKeys(editedCourseName);
    user.getDriver().findElement(By.id("submit-put-course-btn")).click();
    waitForDialogClosed("course-modal", "Edition of course failed", user);
    user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("#course-list .course-list-item:last-child div.course-title span"), editedCourseName), "Unexpected course name");
    CourseNavigationUtilities.deleteCourse(user.getDriver(), COURSE_NAME + EDITED); // Tear down
    """},
    {
    'testname': "courseInfoRestOperations",
    'annotations':"""      @AccessMode(resID = "loginservice", concurrency = 10, sharing = true, accessMode = "READONLY")
    @AccessMode(resID = "openvidumock", concurrency = 10, sharing = true, accessMode = "NOACCESS")
    @AccessMode(resID = "information", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "executor", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webbrowser", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webserver", concurrency = 1, accessMode = "READWRITE") """,
    'parameters': [],
    'code': """loginAndCreateNewCourse();
    enterCourseAndNavigateTab(COURSE_NAME, "info-tab-icon");
    user.waitUntil(ExpectedConditions.presenceOfNestedElementLocatedBy(By.cssSelector(".md-tab-body.md-tab-active"), By.cssSelector(".card-panel.warning")), "Course info wasn't empty");
    log.info("Editing course information");

    user.getDriver().findElement(By.id("edit-course-info")).click();
    user.getDriver().findElement(By.className("ql-editor")).sendKeys(TEST_COURSE_INFO);
    user.getDriver().findElement(By.id("send-info-btn")).click();

    user.waitUntil(ExpectedConditions.textToBe(By.cssSelector(".ql-editor p"), TEST_COURSE_INFO), "Unexpected course info");
    log.info("Course information successfully updated");
    CourseNavigationUtilities.deleteCourse(user.getDriver(), COURSE_NAME);
    """},
    {
    'testname': "sessionRestOperations",
    'annotations':"""         @AccessMode(resID = "loginservice", concurrency = 10, sharing = true, accessMode = "READONLY")
    @AccessMode(resID = "openvidumock", concurrency = 10, sharing = true, accessMode = "NOACCESS")
    @AccessMode(resID = "session", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "executor", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webbrowser", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webserver", concurrency = 1, accessMode = "READWRITE") """,
    'parameters': [],
    'code': """
    loginAndCreateNewCourse();

    enterCourseAndNavigateTab(COURSE_NAME, "sessions-tab-icon");
    log.info("Adding new session");
    openDialog("#add-session-icon", user);
    fillSessionForm("TEST LESSON NAME", "TEST LESSON COMMENT", LocalDate.parse("2018-03-01"), LocalTime.parse("15:10"), false);
    waitForDialogClosed("course-details-modal", "Addition of session failed", user);
    verifySessionDetails("TEST LESSON NAME", "TEST LESSON COMMENT", "Jan 3, 2018 - 03:10", "Mar 1, 2018 - 15:10");


    log.info("Editing session");
    openDialog(".edit-session-icon", user);
    fillSessionForm("TEST LESSON NAME EDITED", "TEST LESSON COMMENT EDITED", LocalDate.parse("2019-04-02"), LocalTime.parse("05:10"), true);
    waitForDialogClosed("put-delete-modal", "Edition of session failed", user);
    verifySessionDetails("TEST LESSON NAME EDITED", "TEST LESSON COMMENT EDITED", "Feb 4, 2019 - 05:10", "Apr 2, 2019 - 05:10");

    log.info("Deleting session");
    openDialog(".edit-session-icon", user);
    user.waitUntil(ExpectedConditions.elementToBeClickable(By.id(("label-delete-checkbox"))), "Checkbox for session deletion not clickable");
    user.getDriver().findElement(By.id("label-delete-checkbox")).click();
    user.waitUntil(ExpectedConditions.elementToBeClickable(By.id(("delete-session-btn"))), "Button for session deletion not clickable");
    user.getDriver().findElement(By.id("delete-session-btn")).click();
    waitForDialogClosed("put-delete-modal", "Deletion of session failed", user);
    user.waitUntil(ExpectedConditions.numberOfElementsToBe(By.cssSelector("li.session-data"), 0), "Unexpected number of sessions");
    log.info("Session successfully deleted");

    CourseNavigationUtilities.deleteCourse(user.getDriver(), COURSE_NAME);
    """},
    {
    'testname': "forumRestOperations",
    'annotations':"""
    @AccessMode(resID = "loginservice", concurrency = 10, sharing = true, accessMode = "READONLY")
    @AccessMode(resID = "openvidumock", concurrency = 10, sharing = true, accessMode = "NOACCESS")
    @AccessMode(resID = "forum", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "executor", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webbrowser", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webserver", concurrency = 1, accessMode = "READWRITE") """,
    'parameters': [],
    'code': """
    loginAndCreateNewCourse();
    enterCourseAndNavigateTab(COURSE_NAME, "forum-tab-icon");
    log.info("Adding new entry to the forum");
    openDialog("#add-entry-icon", user);
    // Find form elements
    WebElement titleField = user.getDriver().findElement(By.id("input-post-title"));
    WebElement commentField = user.getDriver().findElement(By.id("input-post-comment"));
    String title = "TEST FORUM ENTRY";
    String comment = "TEST FORUM COMMENT";
    String entryDate = "a few seconds ago";
    // Fill input fields
    titleField.sendKeys(title);
    commentField.sendKeys(comment);
    user.getDriver().findElement(By.id("post-modal-btn")).click();
    waitForDialogClosed("course-details-modal", "Addition of entry failed", user);
    // Check fields of new entry
    WebElement entryEl = user.getDriver().findElement(By.cssSelector("li.entry-title"));
    user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("li.entry-title .forum-entry-title"), title),
    "Unexpected entry title in the forum");
    user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("li.entry-title .forum-entry-author"), TEACHER_NAME),
    "Unexpected entry author in the forum");
    user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("li.entry-title .forum-entry-date"), entryDate),
    "Unexpected entry date in the forum");
    log.info("New entry successfully added to the forum");
    log.info("Entering the new entry");
    entryEl.click();
    user.waitUntil(ExpectedConditions.textToBe(
    By.cssSelector(".comment-block > app-comment:first-child > div.comment-div .message-itself"),
    comment), "Unexpected entry title in the entry details view");
    user.waitUntil(ExpectedConditions.textToBe(
    By.cssSelector(".comment-block > app-comment:first-child > div.comment-div .forum-comment-author"),
    TEACHER_NAME), "Unexpected entry author in the entry details view");
    // Comment reply
    log.info("Adding new replay to the entry's only comment");
    String reply = "TEST FORUM REPLY";
    openDialog(".replay-icon", user);
    commentField = user.getDriver().findElement(By.id("input-post-comment"));
    commentField.sendKeys(reply);
    user.getDriver().findElement(By.id("post-modal-btn")).click();
    waitForDialogClosed("course-details-modal", "Addition of entry reply failed", user);
    user.waitUntil(ExpectedConditions.textToBe(By.cssSelector(
    ".comment-block > app-comment:first-child > div.comment-div div.comment-div .message-itself"),
    reply), "Unexpected reply message in the entry details view");
    user.waitUntil(ExpectedConditions.textToBe(By.cssSelector(
    ".comment-block > app-comment:first-child > div.comment-div div.comment-div .forum-comment-author"),
    TEACHER_NAME), "Unexpected reply author in the entry details view");
    log.info("Replay successfully added");
    // Forum deactivation
    user.getDriver().findElement(By.id("entries-sml-btn")).click();
    log.info("Deactivating forum");
    openDialog("#edit-forum-icon", user);
    user.waitUntil(ExpectedConditions.elementToBeClickable(By.id(("label-forum-checkbox"))),
    "Checkbox for forum deactivation not clickable");
    user.getDriver().findElement(By.id("label-forum-checkbox")).click();
    user.waitUntil(ExpectedConditions.elementToBeClickable(By.id(("put-modal-btn"))),
    "Button for forum deactivation not clickable");
    user.getDriver().findElement(By.id("put-modal-btn")).click();
    waitForDialogClosed("put-delete-modal", "Deactivation of forum failed", user);
    user.waitUntil(ExpectedConditions.elementToBeClickable(By.cssSelector("app-error-message .card-panel.warning")),
    "Warning card (forum deactivated) missing");
    log.info("Forum successfully deactivated");
    CourseNavigationUtilities.deleteCourse(user.getDriver(), COURSE_NAME);
    """},
    {
    'testname': "filesRestOperations",
    'annotations':"""
    @AccessMode(resID = "loginservice", concurrency = 10, sharing = true, accessMode = "READONLY")
    @AccessMode(resID = "openvidumock", concurrency = 10, sharing = true, accessMode = "NOACCESS")
    @AccessMode(resID = "files", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "executor", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webbrowser", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webserver", concurrency = 1, accessMode = "READWRITE") """,
    'parameters': [],
    'code': """
    loginAndCreateNewCourse();
    enterCourseAndNavigateTab(COURSE_NAME, "files-tab-icon");
    log.info("Checking that there are no files in the course");
    user.waitUntil(ExpectedConditions.elementToBeClickable(By.cssSelector("app-error-message .card-panel.warning")),
    "Warning card (course with no files) missing");
    log.info("Adding new file group");
    openDialog("#add-files-icon", user);
    String fileGroup = "TEST FILE GROUP";
    // Find form elements
    WebElement titleField = user.getDriver().findElement(By.id("input-post-title"));
    titleField.sendKeys(fileGroup);
    user.getDriver().findElement(By.id("post-modal-btn")).click();
    waitForDialogClosed("course-details-modal", "Addition of file group failed", user);
    // Check fields of new file group
    user.waitUntil(ExpectedConditions.textToBe(By.cssSelector(".file-group-title h5"), fileGroup),
    "Unexpected file group name");
    log.info("File group successfully added");
    // Edit file group
    log.info("Editing file group");
    openDialog("#edit-filegroup-icon", user);
    // Find form elements
    titleField = user.getDriver().findElement(By.id("input-file-title"));
    titleField.clear();
    titleField.sendKeys(fileGroup + EDITED);
    user.getDriver().findElement(By.id("put-modal-btn")).click();
    waitForDialogClosed("put-delete-modal", "Edition of file group failed", user);
    // Check fields of edited file group
    user.waitUntil(
    ExpectedConditions.textToBe(By.cssSelector("app-file-group .file-group-title h5"), fileGroup + EDITED),
    "Unexpected file group name");
    log.info("File group successfully edited");
    // Add file subgroup
    log.info("Adding new file sub-group");
    String fileSubGroup = "TEST FILE SUBGROUP";
    openDialog(".add-subgroup-btn", user);
    titleField = user.getDriver().findElement(By.id("input-post-title"));
    titleField.sendKeys(fileSubGroup);
    user.getDriver().findElement(By.id("post-modal-btn")).click();
    waitForDialogClosed("course-details-modal", "Addition of file sub-group failed", user);
    // Check fields of new file subgroup
    user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("app-file-group app-file-group .file-group-title h5"),
    fileSubGroup), "Unexpected file sub-group name");
    log.info("File sub-group successfully added");
    log.info("Adding new file to sub-group");
    openDialog("app-file-group app-file-group .add-file-btn", user);
    WebElement fileUploader = user.getDriver().findElement(By.className("input-file-uploader"));
    String fileName = "testFile.txt";
    log.info("Uploading file located on path '{}'",
    System.getProperty("user.dir") + "/src/test/resources/" + fileName);
    user.runJavascript("arguments[0].setAttribute('style', 'display:block')", fileUploader);
    user.waitUntil(
    ExpectedConditions.presenceOfElementLocated(By.xpath(
    "//input[contains(@class, 'input-file-uploader') and contains(@style, 'display:block')]")),
    "Waiting for the input file to be displayed");
    fileUploader.sendKeys(System.getProperty("user.dir") + "/src/test/resources/" + fileName);
    user.getDriver().findElement(By.id("upload-all-btn")).click();
    // Wait for upload
    user.waitUntil(
    ExpectedConditions.presenceOfElementLocated(
    By.xpath("//div[contains(@class, 'determinate') and contains(@style, 'width: 100')]")),
    "Upload process not completed. Progress bar not filled");
    user.waitUntil(ExpectedConditions.textToBe(By.xpath("//i[contains(@class, 'icon-status-upload')]"), "done"),
    "Upload process failed");
    log.info("File upload successful");
    // Close dialog
    user.getDriver().findElement(By.id("close-upload-modal-btn")).click();
    waitForDialogClosed("course-details-modal", "Upload of file failed", user);
    // Check new uploaded file
    user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("app-file-group app-file-group .chip .file-name-div"),
    fileName), "Unexpected uploaded file name");
    log.info("File successfully added");
    // Edit file
    log.info("Editing file");
    openDialog("app-file-group app-file-group .edit-file-name-icon", user);
    titleField = user.getDriver().findElement(By.id("input-file-title"));
    titleField.clear();
    String editedFileName = "testFileEDITED.txt";
    titleField.sendKeys(editedFileName);
    user.getDriver().findElement(By.id("put-modal-btn")).click();
    waitForDialogClosed("put-delete-modal", "Edition of file failed", user);
    // Check edited file name
    user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("app-file-group app-file-group .chip .file-name-div"),
    editedFileName), "Unexpected uploaded file name");
    log.info("File successfully edited");
    // Delete file group
    log.info("Deleting file-group");
    user.getDriver().findElement(By.cssSelector("app-file-group .delete-filegroup-icon")).click();
    user.waitUntil(ExpectedConditions.elementToBeClickable(By.cssSelector("app-error-message .card-panel.warning")),
    "Warning card (course with no files) missing");
    log.info("File group successfully deleted");
    CourseNavigationUtilities.deleteCourse(user.getDriver(), COURSE_NAME);   """},
    {
    'testname': "attendersRestOperations",
    'annotations':"""
    @AccessMode(resID = "loginservice", concurrency = 10, sharing = true, accessMode = "READONLY")
    @AccessMode(resID = "openvidumock", concurrency = 10, sharing = true, accessMode = "NOACCESS")
    @AccessMode(resID = "attenders", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "executor", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webbrowser", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webserver", concurrency = 1, accessMode = "READWRITE") """,
    'parameters': [],
    'code': """
    loginAndCreateNewCourse();
    enterCourseAndNavigateTab(COURSE_NAME, "attenders-tab-icon");
    log.info("Checking that there is only one attender to the course");
    user.waitUntil(ExpectedConditions.numberOfElementsToBe(By.className("attender-row-div"), 1),
    "Unexpected number of attenders for the course");
    user.waitUntil(ExpectedConditions.textToBe(By.cssSelector(".attender-row-div .attender-name-p"), TEACHER_NAME),
    "Unexpected name for the attender");
    // Add attender fail
    log.info("Adding attender (should FAIL)");
    openDialog("#add-attenders-icon", user);
    String attenderName = "studentFail@gmail.com";
    WebElement titleField = user.getDriver().findElement(By.id("input-attender-simple"));
    titleField.sendKeys(attenderName);
    user.getDriver().findElement(By.id("put-modal-btn")).click();
    waitForDialogClosed("put-delete-modal", "Addition of attender fail", user);
    user.waitUntil(ExpectedConditions.elementToBeClickable(By.cssSelector("app-error-message .card-panel.fail")),
    "Error card (attender not added to the course) missing");
    user.waitUntil(ExpectedConditions.numberOfElementsToBe(By.className("attender-row-div"), 1),
    "Unexpected number of attenders for the course");
    user.getDriver().findElement(By.cssSelector("app-error-message .card-panel.fail .material-icons")).click();
    log.info("Attender addition successfully failed");
    // Add attender success
    log.info("Adding attender (should SUCCESS)");
    openDialog("#add-attenders-icon", user);
    attenderName = "student1@gmail.com";
    titleField = user.getDriver().findElement(By.id("input-attender-simple"));
    titleField.sendKeys(attenderName);
    user.getDriver().findElement(By.id("put-modal-btn")).click();
    waitForDialogClosed("put-delete-modal", "Addition of attender failed", user);
    user.waitUntil(ExpectedConditions.elementToBeClickable(By.cssSelector("app-error-message .card-panel.correct")),
    "Success card (attender properly added to the course) missing");
    user.waitUntil(ExpectedConditions.numberOfElementsToBe(By.className("attender-row-div"), 2),
    "Unexpected number of attenders for the course");
    user.getDriver().findElement(By.cssSelector("app-error-message .card-panel.correct .material-icons")).click();
    log.info("Attender addition successfully finished");
    // Remove attender
    log.info("Removing attender");
    user.getDriver().findElement(By.id("edit-attenders-icon")).click();
    user.waitUntil(ExpectedConditions.elementToBeClickable(By.cssSelector(".del-attender-icon")),
    "Button for attender deletion not clickable");
    user.getDriver().findElement(By.cssSelector(".del-attender-icon")).click();
    user.waitUntil(ExpectedConditions.numberOfElementsToBe(By.className("attender-row-div"), 1),
    "Unexpected number of attenders for the course");
    log.info("Attender successfully removed");
    CourseNavigationUtilities.deleteCourse(user.getDriver(), COURSE_NAME);   """}

]