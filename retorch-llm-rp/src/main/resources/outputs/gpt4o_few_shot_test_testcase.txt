package com.fullteaching.e2e.no_elastest.functional.test;

import com.fullteaching.e2e.no_elastest.common.BaseLoggedTest;
import com.fullteaching.e2e.no_elastest.common.CourseNavigationUtilities;
import com.fullteaching.e2e.no_elastest.common.ForumNavigationUtilities;
import com.fullteaching.e2e.no_elastest.common.NavigationUtilities;
import com.fullteaching.e2e.no_elastest.common.exception.ElementNotFoundException;
import com.fullteaching.e2e.no_elastest.utils.Click;
import com.fullteaching.e2e.no_elastest.utils.Wait;
import giis.retorch.annotations.AccessMode;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;

import java.io.IOException;
import java.util.Calendar;
import java.util.List;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;

@Tag("e2e")
@DisplayName("E2E tests for Class Forum Entry Creation")
class ClassForumEntryTest extends BaseLoggedTest {

    public ClassForumEntryTest() {
        super();
    }

    public static Stream<Arguments> data() throws IOException {
        return ParameterLoader.getTestUsers();
    }

    @ParameterizedTest
    @MethodSource("data")
    @AccessMode(resID = "loginservice", concurrency = 10, sharing = true, accessMode = "READONLY")
    @AccessMode(resID = "forum", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "executor", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webbrowser", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webserver", concurrency = 1, accessMode = "READWRITE")
    void createClassForumEntryTest(String mail, String password, String role) {
        this.slowLogin(user, mail, password);

        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(System.currentTimeMillis());
        int mYear = calendar.get(Calendar.YEAR);
        int mMonth = calendar.get(Calendar.MONTH);
        int mDay = calendar.get(Calendar.DAY_OF_MONTH);
        int mHour = calendar.get(Calendar.HOUR_OF_DAY);
        int mMinute = calendar.get(Calendar.MINUTE);
        int mSecond = calendar.get(Calendar.SECOND);

        try {
            // Navigate to the courses home
            NavigationUtilities.toCoursesHome(driver);

            // Select a course
            WebElement course = CourseNavigationUtilities.getCourseByName(driver, "Test Course");
            course.findElement(COURSE_LIST_COURSE_TITLE).click();
            Wait.notTooMuch(driver).until(ExpectedConditions.visibilityOfElementLocated(By.id(TABS_DIV_ID)));

            // Go to the forum tab
            CourseNavigationUtilities.go2Tab(driver, FORUM_ICON);
            assertTrue(ForumNavigationUtilities.isForumEnabled(CourseNavigationUtilities.getTabContent(driver, FORUM_ICON)), "Forum not activated");

            // Create a new forum entry
            String newEntryTitle = "Test Forum Entry " + mDay + mMonth + mYear + mHour + mMinute + mSecond;
            String newEntryContent = "This is a test entry created on " + mDay + " " + months[mMonth] + " " + mYear + " at " + mHour + ":" + mMinute + ":" + mSecond;
            ForumNavigationUtilities.newEntry(driver, newEntryTitle, newEntryContent);

            // Verify the new entry is created
            WebElement newEntry = ForumNavigationUtilities.getEntry(driver, newEntryTitle);
            assertNotNull(newEntry, "New forum entry not found");
            Click.element(driver, newEntry.findElement(FORUM_ENTRY_LIST_ENTRY_TITLE));

            // Verify the content of the new entry
            WebElement entryContent = Wait.notTooMuch(driver).until(ExpectedConditions.visibilityOfElementLocated(FORUM_ENTRY_CONTENT));
            assertEquals(newEntryContent, entryContent.getText(), "Forum entry content does not match");

        } catch (ElementNotFoundException notFoundException) {
            fail("Failed to navigate to course forum:: " + notFoundException.getClass() + ": " + notFoundException.getLocalizedMessage());
        }
    }
}
